<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="/calendar.css">
    <link rel="stylesheet" href="/notify.css">
    <title>Calendar</title>
    <script src="notification.js"></script>
</head>
<body>
    <header>
        <h1>Calendar</h1>
        <% if (typeof username !== 'undefined') { %>
            <div class="header">
                <a href="/user"><p>Go to, <%= username %>'s Profile!</p></a>
            </div>
        <% } else { %>
            <div class="header">
                <p><a href="/login">Login</a></p>
            </div>
        <% } %>
    </header>

    <nav>
        <ul>
            <li><a href="/main">Home</a></li> 
            <li><a href="/resources">Resources</a></li>
            <li><a href="/calendar">Calendar</a></li>
            <li><a href="/journal">Journal</a></li>
        </ul>
    </nav>

    <main class="container">
        <table id="calendar">
            <thead>
             <tr>
                <th><button id="prev-month"><span >&lt;</span></button></th>
                <th colspan="5" class="month-name"></th>
                <th><button id="next-month"><span >&gt;</span></button></th>
             </tr> 
                <tr id="days">
                    <th>Sunday</th>
                    <th>Monday</th>
                    <th>Tuesday</th>
                    <th>Wednesday</th>
                    <th>Thursday</th>
                    <th> Friday </th>
                    <th>Saturday</th>
                </tr>
            </thead>
            <tbody class="month-dates"></tbody>
        </table>

        <aside class="create-event">
            <form id="event-form">
                <h1>Events and Reminders.</h1>
                <hr>
                <fieldset>
                    <legend>Create an event</legend>
    
                    <label for="name">Name:<br>
                        <input type="text" id="name" required></label><br>
                    
                    <br><label for="date">Date:<br>
                    <input type="datetime-local" id="date" required></label><br>
    
                    <br><label for="notes">Event Notes:<br>
                    <textarea name="body" cols="40" rows="20" id="notes" placeholder="Type your message here..."></textarea></label><br>
    
                    <input type="submit" value="Create Event" >
                </fieldset>
            </form>
    
            <section id="event-list">
                <h2 id="e-header">Upcoming Events</h2>
                <hr>
                <% if (events.length > 0) { %>
                    <% events.forEach(function(event) { %>
                        <div class="event" data-id="<%= event._id %>">
                            <strong><%= event.name %></strong><br>
                            <em><%= event.date %></em><br>
                            <p><%= event.notes %></p>
                            <button class="del-button" data-id="<%= event._id %>">Delete</button>
                            <hr>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No events for this month.</p>
                <% } %>
            </section>
            
        </aside>
    
    </main>


    <footer>
        <p>&copy; 2023 The Journey. All rights reserved.</p>
        <p>Contacts</p>
    </footer>

    <script>
        console.log("Calendar script loaded");
        let date = new Date();
        let year = date.getFullYear();
        let month = date.getMonth();
        const day = document.querySelector(".month-dates");
        const current = document.querySelector(".month-name");
        const eventList = document.getElementById("event-list");

        const months = [
            "January", "February", "March", "April", "May", "June", 
            "July", "August", "September", "October", "November", "December"
        ];

        // Array to store events
        const events = [];

        const generate = () => {
            const firstday = new Date(year, month, 1).getDay();
            const lastday = new Date(year, month + 1, 0).getDate();
            const ldayd = new Date(year, month, lastday).getDay();
            const prevlstday = new Date(year, month, 0).getDate();
            let td = "";
            let weekRow = "<tr>";

            // Previous month's days
            for (let i = firstday; i > 0; i--) {
                weekRow += `<td class="inactive">${prevlstday - i + 1}</td>`;
            }

            // Current month's days
            for (let i = 1; i <= lastday; i++) {
                const isToday = (i === date.getDate() && month === new Date().getMonth() && year === new Date().getFullYear()) ? "active" : "";
                const hasEvent = events.some(event => event.date === `${year}-${month + 1}-${i}`);
                weekRow += `<td class="${isToday} ${hasEvent ? 'event-day' : ''}" data-day="${i}">${i}</td>`;

                // Start a new row if it's the end of the week
                if ((firstday + i) % 7 === 0) {
                    weekRow += "</tr><tr>"; // Close current row and start a new one
                }
            }

            // Next month's days
            for (let i = ldayd + 1; i <= 6; i++) {
                weekRow += `<td class="inactive">${i - ldayd}</td>`;
            }

            weekRow += "</tr>"; // Close the last row

            current.innerHTML = `<th colspan="7">${months[month]} ${year}</th>`;
            day.innerHTML = weekRow; // Populate the dates
            displayEvents();
        };

        // Handle Previous/Next month navigation
        document.getElementById('prev-month').addEventListener('click', () => {
            month--;
            if (month < 0) {
                month = 11;
                year--;
            }
            generate();
            displayEvents();
        });

        document.getElementById('next-month').addEventListener('click', () => {
            month++;
            if (month > 11) {
                month = 0;
                year++;
            }
            generate();
            displayEvents();
        });

        function HighlightE(event) {
            const dateE = event.date.split("-");
            const newDate = dateE[2];
            console.log("Date:", newDate);
            const eventCells = document.querySelectorAll(`[data-day='${newDate}']`);
            console.log(eventCells);
            eventCells.forEach(cell => {
                cell.classList.add('event-day');
            });
        }

        // Handle Event Submission
        document.getElementById("event-form").addEventListener("submit", (e) => {
            e.preventDefault();

            const eventName = document.getElementById("name").value;
            const eventDate = document.getElementById("date").value.split("T")[0]; // Date in YYYY-MM-DD format
            const eventNotes = document.getElementById("notes").value;

            const event = { name: eventName, date: eventDate, notes: eventNotes };

            // Add event to the events array
            events.push(event);
           

            // Display event under the form
            const eventElement = document.createElement("div");
            eventElement.innerHTML = `<strong>${event.name}</strong> (${event.date})<br>${event.notes}<hr>`;
            eventList.appendChild(eventElement);

            HighlightE(event);

            fetch('/calendar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(event)  // Send event data as JSON
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // alert('Event created successfully');
                    showPopup('Event created successfully', 'success');
                } else {
                    console.error('Error creating event:', data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });

            // Clear form inputs
            document.getElementById("name").value = "";
            document.getElementById("date").value = "";
            document.getElementById("notes").value = "";
        });

        

        function displayEvents() {
        fetch(`/calendar`)
            .then(response => response.json())
            .then(events => {
                // Clear the current event list
                eventList.innerHTML = '';
                
                events.forEach(event => {
                    // Create the event element (using textContent to avoid HTML injection)
                    const eventElement = document.createElement("div");

                    eventElement.classList.add('event'); // Optional: add a class for styling
                    eventElement.innerHTML = `<strong>${event.name}</strong> (${event.date})<br>${event.notes}<hr>`;

                    // Append the event element to the event list
                    eventList.appendChild(eventElement);

                    // Highlight the event date on the calendar
                    const eventDay = new Date(event.date).getDate();
                    const eventCells = document.querySelectorAll(`[data-day='${eventDay}']`);
                    eventCells.forEach(cell => {
                        cell.classList.add('event-day');
                    });
                });
            })
            .catch(error =>{ console.error('Error fetching events:', error)});
        }

        document.querySelectorAll('.event').forEach(div => {
            div.addEventListener("click", function() {
                        HighlightE(event);
                });
        });

        document.querySelectorAll('.del-button').forEach(button => {
        button.addEventListener('click', function() {
            const eventId = this.getAttribute('data-id');
            deleteEvent(eventId);
        });
    });

        // Delete event function
        function deleteEvent(eventId) {
            fetch('/calendar', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ eventId: eventId })  // Send the eventId in the request body
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showPopup('Event deleted successfully', 'success');  // Show success message
                    // Remove the event element from the DOM
                    document.querySelector(`.event[data-id='${eventId}']`).remove();
                } else {
                    alert('Failed to delete event');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting event');
            });
    }

        generate();
    
        displayEvents();
    </script> 
</body>
</html>
